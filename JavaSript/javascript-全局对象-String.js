---------------------------
String						|
---------------------------
	# 字符串类型的包装值
		var x = "5";
		var y = new String("5");
		x == y		//true
		x === y		//false
	
	# 可以使用下标来访问值
		var x = "123";
		x[0];

	# 常用方法
		
		concat()
			* 连接两个或更多字符串，并返回新的字符串。

		slice()
			* 起始位置和结束位置(不包含结束位置)

		substring()
			* 起始位置和结束位置(不包含结束位置)
			* 小的一个数,为起始位置,大的一个数为结束位置

		substr()	
			* 第一个参数表示起始位置,第二个参数表示要切割多长
		
		match()
			* 根据正则匹配出字符串中所有符合条件的子字符串

		indexOf()
			* 返回某个指定的字符串值在字符串中首次出现的位置。

		lastIndexOf()	
			* 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。		
		
		split();
			* 分隔为数组
		
	# 创建
		var s = new String("123");
		var s = "123";
	
	# 实例属性
		length	
			* 字符串的长度
	
	# 实例方法
		charAt()	
			* 返回在指定位置的字符。

		charCodeAt()
			* 返回在指定的位置的字符的 Unicode 编码。

		concat()
			* 连接两个或更多字符串，并返回新的字符串。

		fromCharCode()
			* 将 Unicode 编码转为字符。
			* 参数是一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。

		indexOf()
			* 返回某个指定的字符串值在字符串中首次出现的位置。

		lastIndexOf()	
			* 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。

		//正则相关
		match()
			* 查找找到一个或多个正则表达式的匹配。
			* 返回的 Array

		replace()
			* 在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。
			* 第一个参数,目标字符串或者是一个正则对象,第二个参数,替换的后的字符串

		search()
			* 查找与正则表达式相匹配的值。返回起始索引,如果没有找到,返回 -1
			* 参数可以是字符串/正则对象
			
		split()
			* 把字符串分割为字符串数组。
			* 参数
				separator	
					* 以啥进行分隔?可以是字符串/正则对象
				limit	
					* 可选。该参数可指定返回的数组的最大长度。
					* 如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。
		//正则相关
		

		slice()
			* 提取字符串的片断，返回新的字符串。
			* 参数
				start	
					* 必须. 要抽取的片断的起始下标。第一个字符位置为 0
				end	
					* 可选。 紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。
					* 如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。
		
		substr()	
			* 从起始索引号提取字符串中指定数目的字符。
			* 参数
				start	
					* 必需。要抽取的子串的起始下标。必须是数值。
					* 如果是负数，那么该参数声明从字符串的尾部开始算起的位置。
					* 也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。
				length	
					* 可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。
		
		substring()
			* 提取字符串中两个指定的索引号之间的字符。
			* 参数
				from	
					* 必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。
				to	
					* 可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。
					* 如果省略该参数，那么返回的子串会一直到字符串的结尾。

		toLowerCase()
			* 把字符串转换为小写。

		toUpperCase()
			* 把字符串转换为大写。

		trim()	
			* 去除字符串两边的空白

		valueOf()
			* 返回某个字符串对象的原始值。