--------------------------------
进程与线程						|
--------------------------------
	* 进程	
		是资源的集合
		启动进程慢
		创建新进程,需要对父进程进行一次克隆
		内存独立
		进程之间的通信,必须通过中间代理来实现
		进程只能操作子进程
		进程至少会包含一个线程
		
		
	* 线程
		是执行的指令集
		启动线程快
		线程,由进程创建,不需要克隆父进程
		共享同一进程的内存
		同一个进程之间的线程,可以直接通信
		线程可以操作,控制同一进程中的其他线程
	
	* 进程与线程之间没有运行效率之分,都一样.但是启动效率,线程较高


--------------------------------
进程与线程-GIL					|
--------------------------------
	* Python解释器的一个BUG,只有CPython解释器才有这个问题
	* GIL其实就是一把锁,GIL就是这把锁的名称(全局解释器锁)
	* GIL问题导致了,在同一时刻,CPython解释器只能有一个'线程'进入解释器
	* 这把锁存在的意义是:其实是一个历史问题,Python作者在开发这门语言的时候,仅仅考虑了单线程
	* GIL,对于多进程没有影响
	* 解决办法就是:多进程 + 协程

--------------------------------
进程与线程-什么时候用			|
--------------------------------
	* IO密集形,适合多线程
	* 计算密集形,适合多进程
