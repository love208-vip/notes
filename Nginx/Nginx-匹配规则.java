---------------------------
Nginx-匹配规则				|
---------------------------
	# location
	# 语法:
		=
			//精准匹配
		~
			//区分大小写匹配
		~*
			//不区分大小写匹配
		^~
			//禁止表达式匹配
	

---------------------------
=							|
---------------------------
	location = /{
		//仅仅匹配:	/	的请求
	}
	location / {
		//匹配任何以:/	开头的请求
	}

---------------------------
^~							|
---------------------------
	location ^~/images/{
		//匹配任何以: /images/开始的请求,并且停止搜索.不检查正则表达式
	}

---------------------------
~*							|
---------------------------
	location ~*\.(gif|jpg|jpeg|png)${
		//匹配任何以gif,jpg,jpeg,png结尾的文件,
	}

---------------------------
Nginx-Location匹配总结		|
---------------------------
	1,先精准匹配,匹配成功直接OK,匹配失败,进入('2')
	2,尝试普通匹配(可以是N个),如果有一个成功匹配,记忆匹配结果!进入('4')如果有多个匹配,进入('3'),如果一个命中都没('4')
	3,选择普通命中最长的那个,记忆匹配结果,如果没有正则匹配.则直接返回记忆的结果OK.有正则匹配.('4')
	4,尝试正则匹配(可以是N个),从上往下解析,只要有一个匹配OK,直接OK,如果没有!则执行('5')
	5,返回普通命中中,记忆最长的匹配结果,ok 


---------------------------
Nginx-Location图解			|
---------------------------
	# Nginx Location图解

							URI 请求
								|
								|
								|
							精准匹配
							|		|
							|		|
							|		|
						匹配成功	|
									|
								普通匹配1
									|
								普通匹配2
									|
								普通匹配3
									|
								   ...
									|
						-----是否有正则匹配-----
					  |							  |
					  |							  |
					  |							  |
				无正则匹配				有一个或者多个正则匹配
				|		  |						  |
				|		  |						  |
				|		  |						  |
		普通命中一个 普通匹配命中N个		从上往下开始匹配
				|		  |					|				|
				|         |					|				|
			匹配成功 选取最为精确的	匹配成功	所有正则匹配失败
						  |									|
						  |									|
					  匹配成功				选择普通匹配中最为精确的匹配结果
			
		
	# 普通命中的顺序无所谓
	# 正则命中的顺序,就有讲究了.