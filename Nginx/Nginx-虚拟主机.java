-----------------------
Nginx-虚拟主机的配置	|
-----------------------
	# 如果没有配置IP直接访问的处理,使用IP访问,那么默认会指向第一个server

	server{
		//本地监听的端口,
		listen  80;
		//监听的域名
		server_name ywp.com;
		location /{
			//本地目录
			root /usr/local/webapp;
			//默认页面
			index index.html;
		}
		/*
			定义该服务的日志记录文件,与格式
			主要,这里使用 main 格式,那么conf上面的main,定义就要解除注释
		*/
		access_log logs/ywp.access.log main;
	}

-----------------------
Nginx-location详细配置	|
-----------------------
	location /{
		... ...
	}

	# location,有定位的意思,根据URI来进行不同的定位,在虚拟主机的配置中,是必不可少的
	# '一个server可以有多个location'
	# location 的语法大致可以分为三类

		location = []{
			//精准匹配,符号是:=
		}		
			
		
		location []{
			//一般匹配,符号是:没有
		}
			
		
		location ~[]{
			//正则匹配,符号是:~
		}
	
	# 关于执行顺序
		精准匹配 --> 一般匹配 --> 正则匹配

	
---------------------------
Nginx-Location匹配总结		|
---------------------------
	1,先精准匹配,匹配成功直接OK,匹配失败,进入('2')
	2,尝试普通匹配(可以是N个),如果有一个成功匹配,记忆匹配结果!进入('4')如果有多个匹配,进入('3'),如果一个命中都没('4')
	3,选择普通命中最长的那个,记忆匹配结果,如果没有正则匹配.则直接返回记忆的结果OK.有正则匹配.('4')
	4,尝试正则匹配(可以是N个),从上往下解析,只要有一个匹配OK,直接OK,如果没有!则执行('5')
	5,返回普通命中中,记忆最长的匹配结果,ok 


---------------------------
Nginx-Location图解			|
---------------------------
	# Nginx Location图解

							URI 请求
								|
								|
								|
							精准匹配
							|		|
							|		|
							|		|
						匹配成功	|
									|
								普通匹配1
									|
								普通匹配2
									|
								普通匹配3
									|
								   ...
									|
						-----是否有正则匹配-----
					  |							  |
					  |							  |
					  |							  |
				无正则匹配				有一个或者多个正则匹配
				|		  |						  |
				|		  |						  |
				|		  |						  |
		普通命中一个 普通匹配命中N个		从上往下开始匹配
				|		  |					|				|
				|         |					|				|
			匹配成功 选取最为精确的	匹配成功	所有正则匹配失败
						  |									|
						  |									|
					  匹配成功				选择普通匹配中最为精确的匹配结果
		
	
	# 普通命中的顺序无所谓
	# 正则命中的顺序,就有讲究了.