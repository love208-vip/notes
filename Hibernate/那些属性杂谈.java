

 inverse
	* 用户维护表与表,也就是对象与对象之间的关系!
	* 在威化关联关系的时候有用,表示控制权是否转移
	* 默认值为 false 
	* 在一对多关系中:'只能在一的方(set标签)使用,另一方根本就没这个属性'
		* <set inverse="false/true">...

	['SAVE']
		true
			* 数据回保存,但是关联关系会丢失.保存一个部门对象,对象中有员工集合.这些员工数据也能成功的保存,但是员工的外键(指向部门),为null
		false
			* 保存部门,员工也能保存.而且,员工外键能指向部门主键
	['GET']
			* 这东西,对于获取数据是没有影响的
	['UPDATE']
		true
			* 没有控制权,不能解除关联系关系.也不会报错.把一个持久化汉状态的部门对象中的某个员工从集合删除,执行commit,那么数据库中的关系还在!
	['DELETE']
		true
			* 没有控制权,直接删除部门.要报错!它的主键还被人引用着.而自己又失去了维护关系的权利,会报错!当然,如果部门没有被引用.直接删除是没问题的!
		false
			* 先把引用自己主键的那些外键,设置为null,再删除自己!
		
		
 cascade
	* 级联操作,一般不怎么设置!项目中数据是很重要的!
		* 一般就设置一个:sava,就保存级联
	* 可以在一,或者多的一方使用(哪里都行)
	* 一般配置在一的一方
		* 删除一个部门,那么就删除所有员工,别配置在多对一上.不然,删除一个员工.整个部门都没了!
	none:			不级联操作,默认值
	save-update:	级联报错或更新
	delete:			级联删除
	all:			上面所有一起

	* 可以设置多个,用逗号','分隔!
	* 级联保存,保存一个持久化对象的时候,里面包含了一个游离状态的对象.如果不是级联保存.那么在保存部门的时候会报错
	* 级联修改,这东西没意义,你会去修改人家的主键设置?大哥UUID啊!


inverse 和 cascade的区别
	1,
		* inverse 是表维护权利
		* cascade 是级联操作
	2,	
		* inverse 只能在'一'的一方使用
		* cascade 可以在各个地方使用
	3,
		* 他们都对查询操作没影响

	4,既然设置了save-update,inverse="true",那么双向关联都能保存!但是是没有主外键的映射!因为没有表的维护权!